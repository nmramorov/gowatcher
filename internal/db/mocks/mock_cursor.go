// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metrics "github.com/nmramorov/gowatcher/internal/collector/metrics"
)

// MockDriverMethods is a mock of DriverMethods interface.
type MockDriverMethods struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMethodsMockRecorder
}

// MockDriverMethodsMockRecorder is the mock recorder for MockDriverMethods.
type MockDriverMethodsMockRecorder struct {
	mock *MockDriverMethods
}

// NewMockDriverMethods creates a new mock instance.
func NewMockDriverMethods(ctrl *gomock.Controller) *MockDriverMethods {
	mock := &MockDriverMethods{ctrl: ctrl}
	mock.recorder = &MockDriverMethodsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverMethods) EXPECT() *MockDriverMethodsMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDriverMethods) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDriverMethodsMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDriverMethods)(nil).BeginTx), ctx, opts)
}

// Close mocks base method.
func (m *MockDriverMethods) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverMethodsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriverMethods)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockDriverMethods) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDriverMethodsMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDriverMethods)(nil).ExecContext), varargs...)
}

// PingContext mocks base method.
func (m *MockDriverMethods) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockDriverMethodsMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockDriverMethods)(nil).PingContext), ctx)
}

// QueryRowContext mocks base method.
func (m *MockDriverMethods) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDriverMethodsMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDriverMethods)(nil).QueryRowContext), varargs...)
}

// MockDatabaseAccess is a mock of DatabaseAccess interface.
type MockDatabaseAccess struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseAccessMockRecorder
}

// MockDatabaseAccessMockRecorder is the mock recorder for MockDatabaseAccess.
type MockDatabaseAccessMockRecorder struct {
	mock *MockDatabaseAccess
}

// NewMockDatabaseAccess creates a new mock instance.
func NewMockDatabaseAccess(ctrl *gomock.Controller) *MockDatabaseAccess {
	mock := &MockDatabaseAccess{ctrl: ctrl}
	mock.recorder = &MockDatabaseAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseAccess) EXPECT() *MockDatabaseAccessMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDatabaseAccess) Add(arg0 *metrics.JSONMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDatabaseAccessMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDatabaseAccess)(nil).Add), arg0)
}

// CloseConnection mocks base method.
func (m *MockDatabaseAccess) CloseConnection(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockDatabaseAccessMockRecorder) CloseConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockDatabaseAccess)(nil).CloseConnection), arg0)
}

// Get mocks base method.
func (m *MockDatabaseAccess) Get(arg0 string) (*metrics.JSONMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*metrics.JSONMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDatabaseAccessMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabaseAccess)(nil).Get), arg0)
}

// InitDb mocks base method.
func (m *MockDatabaseAccess) InitDb() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDb")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDb indicates an expected call of InitDb.
func (mr *MockDatabaseAccessMockRecorder) InitDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDb", reflect.TypeOf((*MockDatabaseAccess)(nil).InitDb))
}

// Ping mocks base method.
func (m *MockDatabaseAccess) Ping() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ping")
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseAccessMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabaseAccess)(nil).Ping))
}

// UpdateBatch mocks base method.
func (m *MockDatabaseAccess) UpdateBatch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBatch")
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockDatabaseAccessMockRecorder) UpdateBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockDatabaseAccess)(nil).UpdateBatch))
}
